datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  exercises      Exercise[]
  exerciseSets   Workout[]
  WorkoutSession WorkoutSession[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Exercise {
  id          String    @id @default(cuid())
  name        String
  description String?
  videoUrl    String?
  sets        Int?
  reps        Int?
  weight      Int?
  duration    Int? // in seconds
  cooldown    Int? // in seconds
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workouts    Workout[] @relation("WorkoutToExercise")

  @@unique([userId, id])
}

model Workout {
  id             String           @id @default(cuid())
  name           String
  userId         String
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  exerciseIds    String[]
  exercises      Exercise[]       @relation("WorkoutToExercise")
  WorkoutSession WorkoutSession[] 

  @@unique([userId, id])
}

model WorkoutSession {
  id        String  @id @default(cuid())
  workoutId String
  workout   Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, id])
}
